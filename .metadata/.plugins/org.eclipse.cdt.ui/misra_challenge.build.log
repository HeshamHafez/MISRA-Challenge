
**** Build of configuration Debug for project misra_challenge ****

"C:\\ti\\ccs901\\ccs\\utils\\bin\\gmake" -k -j 4 all -O 
 
Building file: "../CRC.c"
Invoking: ARM Compiler
"C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/bin/armcl" -mv4 --code_state=32 --include_path="D:/HH-geegs/Sprints/MISRA_challenge/misra_challenge" --include_path="C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/include" -g --diag_warning=225 --diag_wrap=off --display_error_number --check_misra="all,-1" --misra_advisory=error --misra_required=error --preproc_with_compile --preproc_dependency="CRC.d_raw"  "../CRC.c"
 
>> Compilation failure
subdir_rules.mk:9: recipe for target 'CRC.obj' failed
"C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/include/stdlib.h", line 64: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
1 error detected in the compilation of "../CRC.c".
gmake: *** [CRC.obj] Error 1
Building file: "../L3G4200D.c"
Invoking: ARM Compiler
"C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/bin/armcl" -mv4 --code_state=32 --include_path="D:/HH-geegs/Sprints/MISRA_challenge/misra_challenge" --include_path="C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/include" -g --diag_warning=225 --diag_wrap=off --display_error_number --check_misra="all,-1" --misra_advisory=error --misra_required=error --preproc_with_compile --preproc_dependency="L3G4200D.d_raw"  "../L3G4200D.c"
 
>> Compilation failure
subdir_rules.mk:9: recipe for target 'L3G4200D.obj' failed
"../L3G4200D.c", line 45: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 48: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 50: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 50: error #1430-D: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "ADD" is used as an operand of # or ##.
"../L3G4200D.c", line 53: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 56: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 56: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 57: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 57: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 58: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 58: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 59: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 59: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 60: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 60: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 61: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 61: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 62: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 62: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 63: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 63: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 64: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 64: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 65: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 65: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 66: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 66: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 67: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 67: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 68: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 68: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 69: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 69: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 70: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 70: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 71: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 71: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 72: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 72: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 73: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 73: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 74: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 74: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 75: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 75: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 76: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 76: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 77: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 77: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 78: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 78: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 79: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 79: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 80: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 80: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 81: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 81: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 82: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 82: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 83: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 83: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 84: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 84: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 85: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 85: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 86: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 86: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 87: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 87: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 88: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 88: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 89: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 89: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 90: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 90: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 91: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 91: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 92: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 92: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 93: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 93: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 94: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 94: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 95: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 95: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 96: error #1428-D: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"../L3G4200D.c", line 96: error #1461-D: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"../L3G4200D.c", line 127: error #1431-D: (MISRA-C:2004 19.11/R) All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator ("ON")
"../L3G4200D.c", line 127: error #1431-D: (MISRA-C:2004 19.11/R) All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator ("ON")
"../L3G4200D.c", line 148: error #1431-D: (MISRA-C:2004 19.11/R) All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator ("ON")
"../L3G4200D.c", line 148: error #1431-D: (MISRA-C:2004 19.11/R) All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator ("ON")
"../L3G4200D.c", line 159: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../L3G4200D.c", line 160: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../L3G4200D.c", line 165: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../L3G4200D.c", line 165: warning #169-D: argument of type "u8 *" is incompatible with parameter of type "u16 *"
"../L3G4200D.c", line 166: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../L3G4200D.c", line 167: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../L3G4200D.c", line 174: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../L3G4200D.c", line 175: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../L3G4200D.c", line 192: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../L3G4200D.c", line 193: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
Error limit reached.
100 errors detected in the compilation of "../L3G4200D.c".
Compilation terminated.
gmake: *** [L3G4200D.obj] Error 1
Building file: "../BLMGR.c"
Invoking: ARM Compiler
"C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/bin/armcl" -mv4 --code_state=32 --include_path="D:/HH-geegs/Sprints/MISRA_challenge/misra_challenge" --include_path="C:/ti/ccs901/ccs/tools/compiler/ti-cgt-arm_18.12.1.LTS/include" -g --diag_warning=225 --diag_wrap=off --display_error_number --check_misra="all,-1" --misra_advisory=error --misra_required=error --preproc_with_compile --preproc_dependency="BLMGR.d_raw"  "../BLMGR.c"
 
>> Compilation failure
subdir_rules.mk:9: recipe for target 'BLMGR.obj' failed
"../BLMGR.c", line 886: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 896: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 896: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 904: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 910: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 912: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 914: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 916: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 916: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 921: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("IsFrameValid")
"../BLMGR.c", line 924: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 930: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 931: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 931: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 932: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 947: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 959: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 961: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 967: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 974: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 981: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 988: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 995: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1002: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1015: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1015: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1023: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1026: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1026: error #1390-D: (MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "CrcKey")
"../BLMGR.c", line 1033: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1034: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1034: error #1390-D: (MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "Crc")
"../BLMGR.c", line 1048: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("IsFrameValid")
"../BLMGR.c", line 1049: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("TempVar")
"../BLMGR.c", line 1051: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1055: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1056: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1056: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1057: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1091: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1098: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1105: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1112: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1124: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("TempBuffer")
"../BLMGR.c", line 1125: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("Crc")
"../BLMGR.c", line 1129: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1129: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1143: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1143: error #1390-D: (MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "Crc")
"../BLMGR.c", line 1202: error #1407-D: (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand
"../BLMGR.c", line 1202: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex
"../BLMGR.c", line 1202: error #1397-D: (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand
"../BLMGR.c", line 1363: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1427: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1449: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1472: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1576: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1576: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1584: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1589: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1591: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1593: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1593: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1598: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("ErrorType")
"../BLMGR.c", line 1604: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1631: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1600: error #1471-D: (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause
"../BLMGR.c", line 1667: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("LoopIndex")
"../BLMGR.c", line 1668: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1670: error #1476-D: (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
"../BLMGR.c", line 1693: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("LoopIndex")
"../BLMGR.c", line 1694: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1696: error #1476-D: (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
"../BLMGR.c", line 1696: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex
"../BLMGR.c", line 1698: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1698: error #1483-D: (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean
"../BLMGR.c", line 1700: error #1460-D: (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("BufferPtr: const u8 *")
"../BLMGR.c", line 1705: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("GenCrc")
"../BLMGR.c", line 1706: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("TempBuffer")
"../BLMGR.c", line 1707: error #1497-D: (MISRA-C:2004 5.7/A) No identifier name should be reused ("IsFrameValid")
"../BLMGR.c", line 1708: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1710: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1710: error #1459-D: (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions
"../BLMGR.c", line 1710: error #1397-D: (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand
"../BLMGR.c", line 1713: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1714: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1714: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1714: error #1390-D: (MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "GenCrc")
"../BLMGR.c", line 1718: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1724: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1772: error #137: struct "<unnamed>" has no field "PortMask"
"../BLMGR.c", line 1777: error #137: struct "<unnamed>" has no field "PortMask"
"../BLMGR.c", line 1786: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"../BLMGR.c", line 1791: error #137: struct "<unnamed>" has no field "PortMask"
"../BLMGR.c", line 1791: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1792: error #137: struct "<unnamed>" has no field "PortMask"
"../BLMGR.c", line 1792: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1797: error #137: struct "<unnamed>" has no field "PortMask"
"../BLMGR.c", line 1797: error #1393-D: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"../BLMGR.c", line 1798: error #137: struct "<unnamed>" has no field "PortMask"
Error limit reached.
100 errors detected in the compilation of "../BLMGR.c".
Compilation terminated.
gmake: *** [BLMGR.obj] Error 1
gmake: Target 'all' not remade because of errors.

**** Build Finished ****
